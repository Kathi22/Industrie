{:targets [:Structure]
 :many-to-one? true}
---
/**
* Prosys OPC UA Java SDK
*
* Copyright (c) 2009-2014 Prosys PMS Ltd., http://www.prosysopc.com.
* All rights reserved.
*/

/**
* DO NOT EDIT THIS FILE DIRECTLY! It is generated and will be overwritten on regeneration.
*/

package {{package}};

import org.opcfoundation.ua.encoding.DecodingException;
import org.opcfoundation.ua.encoding.EncodingException;
import org.opcfoundation.ua.encoding.IDecoder;
import org.opcfoundation.ua.encoding.IEncodeable;
import org.opcfoundation.ua.encoding.IEncoder;
import org.opcfoundation.ua.encoding.binary.IEncodeableSerializer;
import org.opcfoundation.ua.encoding.utils.AbstractSerializer;

public class {{classname}} {
    public static final IEncodeableSerializer[] SERIALIZERS = {
    {{#types}}
        new AbstractSerializer({{classname}}.class,
                                {{classname}}.BINARY,
                                {{classname}}.XML) {
                            @Override
                            public void calcEncodeable(IEncodeable encodeable,
                                    IEncoder calculator) throws EncodingException {
                                {{classname}} obj = ({{classname}}) encodeable;
                                {{#fields}}
                                calculator.put(null,
                                        (obj == null) ? null : obj.get{{name}}());
                                {{/fields}}
                            }

                            @Override
                            public IEncodeable getEncodeable(IDecoder decoder)
                                    throws DecodingException {
                                {{classname}} result = new {{classname}}();
                                {{#fields}}
                                result.set{{name}}(decoder.get("{{name}}", {{^datatype.primitive?}}{{datatype.package}}.{{/datatype.primitive?}}{{> datatype_type}}.class));
                                {{/fields}}
                                return result;
                            }

                            @Override
                            public void putEncodeable(IEncodeable encodeable,
                                    IEncoder encoder) throws EncodingException {
                                {{classname}} obj = ({{classname}}) encodeable;
                                {{#fields}}
                                encoder.put("{{name}}",
                                        (obj == null) ? null : obj.get{{name}}());
                                {{/fields}}
                            }
                        }{{^last?}},{{/last?}}
    {{/types}}
    };
}
